{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.",
  "Parameters": {
    "EnvironmentName": {
      "Type": "String",
      "Default": "production",
      "Description": "The name of the environment to add this service to"
    },
    "ServiceName": {
      "Type": "String",
      "Default": "nginx",
      "Description": "A name for the service"
    },
    "ImageUrl": {
      "Type": "String",
      "Default": "nginx",
      "Description": "The url of a docker image that contains the application process that will handle the traffic for this service"
    },
    "ContainerPort": {
      "Type": "Number",
      "Default": 80,
      "Description": "What port number the application inside the docker container is binding to"
    },
    "ContainerCpu": {
      "Type": "Number",
      "Default": 256,
      "Description": "How much CPU to give the container. 1024 is 1 CPU"
    },
    "ContainerMemory": {
      "Type": "Number",
      "Default": 512,
      "Description": "How much memory in megabytes to give the container"
    },
    "Path": {
      "Type": "String",
      "Default": "*",
      "Description": "A path on the load balancer that this service should be connected to. Use * to send all load balancer traffic to this service."
    },
    "Priority": {
      "Type": "Number",
      "Default": 1,
      "Description": "The priority for the routing rule added to the load balancer. This only applies if your have multiple services which have been assigned to different paths on the load balancer."
    },
    "DesiredCount": {
      "Type": "Number",
      "Default": 2,
      "Description": "How many copies of the service task to run"
    },
    "Role": {
      "Type": "String",
      "Default": "",
      "Description": "(Optional) An IAM role to give the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc"
    }
  },
  "Conditions": {
    "HasCustomRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Role"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "${EnvironmentName}-service-${ServiceName}"
        }
      }
    },
    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": {
          "Ref": "ServiceName"
        },
        "Cpu": {
          "Ref": "ContainerCpu"
        },
        "Memory": {
          "Ref": "ContainerMemory"
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "ExecutionRoleArn": {
          "Fn::ImportValue": {
            "Fn::Sub": "${EnvironmentName}:ECSTaskExecutionRole"
          }
        },
        "TaskRoleArn": {
          "Fn::If": [
            "HasCustomRole",
            {
              "Ref": "Role"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "ContainerDefinitions": [
          {
            "Name": {
              "Ref": "ServiceName"
            },
            "Cpu": {
              "Ref": "ContainerCpu"
            },
            "Memory": {
              "Ref": "ContainerMemory"
            },
            "Image": {
              "Ref": "ImageUrl"
            },
            "PortMappings": [
              {
                "ContainerPort": {
                  "Ref": "ContainerPort"
                }
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Fn::Sub": "${EnvironmentName}-service-${ServiceName}"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": {
                  "Ref": "ServiceName"
                }
              }
            }
          }
        ]
      }
    },
    "Service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": "LoadBalancerRule",
      "Properties": {
        "ServiceName": {
          "Ref": "ServiceName"
        },
        "Cluster": {
          "Fn::ImportValue": {
            "Fn::Sub": "${EnvironmentName}:ClusterName"
          }
        },
        "LaunchType": "FARGATE",
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 75
        },
        "DesiredCount": {
          "Ref": "DesiredCount"
        },
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              {
                "Fn::ImportValue": {
                  "Fn::Sub": "${EnvironmentName}:ContainerSecurityGroup"
                }
              }
            ],
            "Subnets": [
              {
                "Fn::ImportValue": {
                  "Fn::Sub": "${EnvironmentName}:PrivateSubnetOne"
                }
              },
              {
                "Fn::ImportValue": {
                  "Fn::Sub": "${EnvironmentName}:PrivateSubnetTwo"
                }
              }
            ]
          }
        },
        "TaskDefinition": {
          "Ref": "TaskDefinition"
        },
        "LoadBalancers": [
          {
            "ContainerName": {
              "Ref": "ServiceName"
            },
            "ContainerPort": {
              "Ref": "ContainerPort"
            },
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            }
          }
        ]
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 6,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "TargetType": "ip",
        "Name": {
          "Ref": "ServiceName"
        },
        "Port": {
          "Ref": "ContainerPort"
        },
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${EnvironmentName}:VpcId"
          }
        }
      }
    },
    "LoadBalancerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            },
            "Type": "forward"
          }
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": [
              {
                "Ref": "Path"
              }
            ]
          }
        ],
        "ListenerArn": {
          "Fn::ImportValue": {
            "Fn::Sub": "${EnvironmentName}:PublicListener"
          }
        },
        "Priority": {
          "Ref": "Priority"
        }
      }
    }
  }
}